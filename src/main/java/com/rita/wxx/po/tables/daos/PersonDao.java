/*
 * This file is generated by jOOQ.
 */
package com.rita.wxx.po.tables.daos;


import com.rita.wxx.po.tables.Person;
import com.rita.wxx.po.tables.pojos.PersonPo;
import com.rita.wxx.po.tables.records.PersonRecord;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PersonDao extends DAOImpl<PersonRecord, PersonPo, Long> {

    /**
     * Create a new PersonDao without any configuration
     */
    public PersonDao() {
        super(Person.PERSON, PersonPo.class);
    }

    /**
     * Create a new PersonDao with an attached configuration
     */
    public PersonDao(Configuration configuration) {
        super(Person.PERSON, PersonPo.class, configuration);
    }

    @Override
    public Long getId(PersonPo object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<PersonPo> fetchRangeOfId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Person.PERSON.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<PersonPo> fetchById(Long... values) {
        return fetch(Person.PERSON.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public PersonPo fetchOneById(Long value) {
        return fetchOne(Person.PERSON.ID, value);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public Optional<PersonPo> fetchOptionalById(Long value) {
        return fetchOptional(Person.PERSON.ID, value);
    }

    /**
     * Fetch records that have <code>name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<PersonPo> fetchRangeOfName(String lowerInclusive, String upperInclusive) {
        return fetchRange(Person.PERSON.NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>name IN (values)</code>
     */
    public List<PersonPo> fetchByName(String... values) {
        return fetch(Person.PERSON.NAME, values);
    }

    /**
     * Fetch records that have <code>age BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<PersonPo> fetchRangeOfAge(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Person.PERSON.AGE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>age IN (values)</code>
     */
    public List<PersonPo> fetchByAge(Integer... values) {
        return fetch(Person.PERSON.AGE, values);
    }

    /**
     * Fetch records that have <code>sex BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<PersonPo> fetchRangeOfSex(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Person.PERSON.SEX, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>sex IN (values)</code>
     */
    public List<PersonPo> fetchBySex(Integer... values) {
        return fetch(Person.PERSON.SEX, values);
    }

    /**
     * Fetch records that have <code>create_time BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<PersonPo> fetchRangeOfCreateTime(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(Person.PERSON.CREATE_TIME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>create_time IN (values)</code>
     */
    public List<PersonPo> fetchByCreateTime(LocalDateTime... values) {
        return fetch(Person.PERSON.CREATE_TIME, values);
    }

    /**
     * Fetch records that have <code>update_time BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<PersonPo> fetchRangeOfUpdateTime(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(Person.PERSON.UPDATE_TIME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>update_time IN (values)</code>
     */
    public List<PersonPo> fetchByUpdateTime(LocalDateTime... values) {
        return fetch(Person.PERSON.UPDATE_TIME, values);
    }
}
